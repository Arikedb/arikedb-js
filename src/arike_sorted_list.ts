/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: arike_sorted_list.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./arike_utils";
import * as pb_1 from "google-protobuf";
export namespace arike_pb {
    export class SortedListMeta extends pb_1.Message {
        #one_of_decls: number[][] = [[3]];
        constructor(data?: any[] | ({
            name?: string;
            val_type?: dependency_1.arike_pb.ValType;
        } & (({
            max_size?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("val_type" in data && data.val_type != undefined) {
                    this.val_type = data.val_type;
                }
                if ("max_size" in data && data.max_size != undefined) {
                    this.max_size = data.max_size;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get val_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_1.arike_pb.ValType.INT) as dependency_1.arike_pb.ValType;
        }
        set val_type(value: dependency_1.arike_pb.ValType) {
            pb_1.Message.setField(this, 2, value);
        }
        get max_size() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set max_size(value: number) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get has_max_size() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get _max_size() {
            const cases: {
                [index: number]: "none" | "max_size";
            } = {
                0: "none",
                3: "max_size"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        static fromObject(data: {
            name?: string;
            val_type?: dependency_1.arike_pb.ValType;
            max_size?: number;
        }): SortedListMeta {
            const message = new SortedListMeta({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.val_type != null) {
                message.val_type = data.val_type;
            }
            if (data.max_size != null) {
                message.max_size = data.max_size;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                val_type?: dependency_1.arike_pb.ValType;
                max_size?: number;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.val_type != null) {
                data.val_type = this.val_type;
            }
            if (this.max_size != null) {
                data.max_size = this.max_size;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.val_type != dependency_1.arike_pb.ValType.INT)
                writer.writeEnum(2, this.val_type);
            if (this.has_max_size)
                writer.writeUint64(3, this.max_size);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SortedListMeta {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SortedListMeta();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.val_type = reader.readEnum();
                        break;
                    case 3:
                        message.max_size = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SortedListMeta {
            return SortedListMeta.deserialize(bytes);
        }
    }
    export class SortedListNamesCount extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            n?: number;
            remove?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("n" in data && data.n != undefined) {
                    this.n = data.n;
                }
                if ("remove" in data && data.remove != undefined) {
                    this.remove = data.remove;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get n() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set n(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get remove() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set remove(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            name?: string;
            n?: number;
            remove?: boolean;
        }): SortedListNamesCount {
            const message = new SortedListNamesCount({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.n != null) {
                message.n = data.n;
            }
            if (data.remove != null) {
                message.remove = data.remove;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                n?: number;
                remove?: boolean;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.n != null) {
                data.n = this.n;
            }
            if (this.remove != null) {
                data.remove = this.remove;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.n != 0)
                writer.writeUint32(2, this.n);
            if (this.remove != false)
                writer.writeBool(3, this.remove);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SortedListNamesCount {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SortedListNamesCount();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.n = reader.readUint32();
                        break;
                    case 3:
                        message.remove = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SortedListNamesCount {
            return SortedListNamesCount.deserialize(bytes);
        }
    }
    export class SortedListValue extends pb_1.Message {
        #one_of_decls: number[][] = [[2]];
        constructor(data?: any[] | ({
            name?: string;
            int_value?: number[];
            float_value?: number[];
            str_value?: string[];
            bool_value?: boolean[];
        } & (({
            val_type?: dependency_1.arike_pb.ValType;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4, 5, 6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("val_type" in data && data.val_type != undefined) {
                    this.val_type = data.val_type;
                }
                if ("int_value" in data && data.int_value != undefined) {
                    this.int_value = data.int_value;
                }
                if ("float_value" in data && data.float_value != undefined) {
                    this.float_value = data.float_value;
                }
                if ("str_value" in data && data.str_value != undefined) {
                    this.str_value = data.str_value;
                }
                if ("bool_value" in data && data.bool_value != undefined) {
                    this.bool_value = data.bool_value;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get val_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_1.arike_pb.ValType.INT) as dependency_1.arike_pb.ValType;
        }
        set val_type(value: dependency_1.arike_pb.ValType) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_val_type() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get int_value() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];
        }
        set int_value(value: number[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get float_value() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as number[];
        }
        set float_value(value: number[]) {
            pb_1.Message.setField(this, 4, value);
        }
        get str_value() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as string[];
        }
        set str_value(value: string[]) {
            pb_1.Message.setField(this, 5, value);
        }
        get bool_value() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as boolean[];
        }
        set bool_value(value: boolean[]) {
            pb_1.Message.setField(this, 6, value);
        }
        get _val_type() {
            const cases: {
                [index: number]: "none" | "val_type";
            } = {
                0: "none",
                2: "val_type"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            name?: string;
            val_type?: dependency_1.arike_pb.ValType;
            int_value?: number[];
            float_value?: number[];
            str_value?: string[];
            bool_value?: boolean[];
        }): SortedListValue {
            const message = new SortedListValue({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.val_type != null) {
                message.val_type = data.val_type;
            }
            if (data.int_value != null) {
                message.int_value = data.int_value;
            }
            if (data.float_value != null) {
                message.float_value = data.float_value;
            }
            if (data.str_value != null) {
                message.str_value = data.str_value;
            }
            if (data.bool_value != null) {
                message.bool_value = data.bool_value;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                val_type?: dependency_1.arike_pb.ValType;
                int_value?: number[];
                float_value?: number[];
                str_value?: string[];
                bool_value?: boolean[];
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.val_type != null) {
                data.val_type = this.val_type;
            }
            if (this.int_value != null) {
                data.int_value = this.int_value;
            }
            if (this.float_value != null) {
                data.float_value = this.float_value;
            }
            if (this.str_value != null) {
                data.str_value = this.str_value;
            }
            if (this.bool_value != null) {
                data.bool_value = this.bool_value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.has_val_type)
                writer.writeEnum(2, this.val_type);
            if (this.int_value.length)
                writer.writePackedInt64(3, this.int_value);
            if (this.float_value.length)
                writer.writePackedDouble(4, this.float_value);
            if (this.str_value.length)
                writer.writeRepeatedString(5, this.str_value);
            if (this.bool_value.length)
                writer.writePackedBool(6, this.bool_value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SortedListValue {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SortedListValue();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.val_type = reader.readEnum();
                        break;
                    case 3:
                        message.int_value = reader.readPackedInt64();
                        break;
                    case 4:
                        message.float_value = reader.readPackedDouble();
                        break;
                    case 5:
                        pb_1.Message.addToRepeatedField(message, 5, reader.readString());
                        break;
                    case 6:
                        message.bool_value = reader.readPackedBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SortedListValue {
            return SortedListValue.deserialize(bytes);
        }
    }
    export class CreateSortedListsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            collection?: string;
            sorted_lists?: SortedListMeta[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("collection" in data && data.collection != undefined) {
                    this.collection = data.collection;
                }
                if ("sorted_lists" in data && data.sorted_lists != undefined) {
                    this.sorted_lists = data.sorted_lists;
                }
            }
        }
        get collection() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set collection(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get sorted_lists() {
            return pb_1.Message.getRepeatedWrapperField(this, SortedListMeta, 2) as SortedListMeta[];
        }
        set sorted_lists(value: SortedListMeta[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            collection?: string;
            sorted_lists?: ReturnType<typeof SortedListMeta.prototype.toObject>[];
        }): CreateSortedListsRequest {
            const message = new CreateSortedListsRequest({});
            if (data.collection != null) {
                message.collection = data.collection;
            }
            if (data.sorted_lists != null) {
                message.sorted_lists = data.sorted_lists.map(item => SortedListMeta.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                collection?: string;
                sorted_lists?: ReturnType<typeof SortedListMeta.prototype.toObject>[];
            } = {};
            if (this.collection != null) {
                data.collection = this.collection;
            }
            if (this.sorted_lists != null) {
                data.sorted_lists = this.sorted_lists.map((item: SortedListMeta) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.collection.length)
                writer.writeString(1, this.collection);
            if (this.sorted_lists.length)
                writer.writeRepeatedMessage(2, this.sorted_lists, (item: SortedListMeta) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateSortedListsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateSortedListsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.collection = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.sorted_lists, () => pb_1.Message.addToRepeatedWrapperField(message, 2, SortedListMeta.deserialize(reader), SortedListMeta));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateSortedListsRequest {
            return CreateSortedListsRequest.deserialize(bytes);
        }
    }
    export class CreateSortedListsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: dependency_1.arike_pb.StatusCode;
            already_exists?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("already_exists" in data && data.already_exists != undefined) {
                    this.already_exists = data.already_exists;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_1.arike_pb.StatusCode.OK) as dependency_1.arike_pb.StatusCode;
        }
        set status(value: dependency_1.arike_pb.StatusCode) {
            pb_1.Message.setField(this, 1, value);
        }
        get already_exists() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set already_exists(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            status?: dependency_1.arike_pb.StatusCode;
            already_exists?: string[];
        }): CreateSortedListsResponse {
            const message = new CreateSortedListsResponse({});
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.already_exists != null) {
                message.already_exists = data.already_exists;
            }
            return message;
        }
        toObject() {
            const data: {
                status?: dependency_1.arike_pb.StatusCode;
                already_exists?: string[];
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.already_exists != null) {
                data.already_exists = this.already_exists;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != dependency_1.arike_pb.StatusCode.OK)
                writer.writeEnum(1, this.status);
            if (this.already_exists.length)
                writer.writeRepeatedString(2, this.already_exists);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateSortedListsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateSortedListsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readEnum();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateSortedListsResponse {
            return CreateSortedListsResponse.deserialize(bytes);
        }
    }
    export class DeleteSortedListsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            collection?: string;
            names?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("collection" in data && data.collection != undefined) {
                    this.collection = data.collection;
                }
                if ("names" in data && data.names != undefined) {
                    this.names = data.names;
                }
            }
        }
        get collection() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set collection(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get names() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set names(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            collection?: string;
            names?: string[];
        }): DeleteSortedListsRequest {
            const message = new DeleteSortedListsRequest({});
            if (data.collection != null) {
                message.collection = data.collection;
            }
            if (data.names != null) {
                message.names = data.names;
            }
            return message;
        }
        toObject() {
            const data: {
                collection?: string;
                names?: string[];
            } = {};
            if (this.collection != null) {
                data.collection = this.collection;
            }
            if (this.names != null) {
                data.names = this.names;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.collection.length)
                writer.writeString(1, this.collection);
            if (this.names.length)
                writer.writeRepeatedString(2, this.names);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteSortedListsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteSortedListsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.collection = reader.readString();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteSortedListsRequest {
            return DeleteSortedListsRequest.deserialize(bytes);
        }
    }
    export class DeleteSortedListsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: dependency_1.arike_pb.StatusCode;
            not_found?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("not_found" in data && data.not_found != undefined) {
                    this.not_found = data.not_found;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_1.arike_pb.StatusCode.OK) as dependency_1.arike_pb.StatusCode;
        }
        set status(value: dependency_1.arike_pb.StatusCode) {
            pb_1.Message.setField(this, 1, value);
        }
        get not_found() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set not_found(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            status?: dependency_1.arike_pb.StatusCode;
            not_found?: string[];
        }): DeleteSortedListsResponse {
            const message = new DeleteSortedListsResponse({});
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.not_found != null) {
                message.not_found = data.not_found;
            }
            return message;
        }
        toObject() {
            const data: {
                status?: dependency_1.arike_pb.StatusCode;
                not_found?: string[];
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.not_found != null) {
                data.not_found = this.not_found;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != dependency_1.arike_pb.StatusCode.OK)
                writer.writeEnum(1, this.status);
            if (this.not_found.length)
                writer.writeRepeatedString(2, this.not_found);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteSortedListsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteSortedListsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readEnum();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteSortedListsResponse {
            return DeleteSortedListsResponse.deserialize(bytes);
        }
    }
    export class ListSortedListsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[2]];
        constructor(data?: any[] | ({
            collection?: string;
        } & (({
            pattern?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("collection" in data && data.collection != undefined) {
                    this.collection = data.collection;
                }
                if ("pattern" in data && data.pattern != undefined) {
                    this.pattern = data.pattern;
                }
            }
        }
        get collection() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set collection(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get pattern() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set pattern(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_pattern() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get _pattern() {
            const cases: {
                [index: number]: "none" | "pattern";
            } = {
                0: "none",
                2: "pattern"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            collection?: string;
            pattern?: string;
        }): ListSortedListsRequest {
            const message = new ListSortedListsRequest({});
            if (data.collection != null) {
                message.collection = data.collection;
            }
            if (data.pattern != null) {
                message.pattern = data.pattern;
            }
            return message;
        }
        toObject() {
            const data: {
                collection?: string;
                pattern?: string;
            } = {};
            if (this.collection != null) {
                data.collection = this.collection;
            }
            if (this.pattern != null) {
                data.pattern = this.pattern;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.collection.length)
                writer.writeString(1, this.collection);
            if (this.has_pattern)
                writer.writeString(2, this.pattern);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListSortedListsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListSortedListsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.collection = reader.readString();
                        break;
                    case 2:
                        message.pattern = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListSortedListsRequest {
            return ListSortedListsRequest.deserialize(bytes);
        }
    }
    export class ListSortedListsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: dependency_1.arike_pb.StatusCode;
            sorted_lists?: SortedListMeta[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("sorted_lists" in data && data.sorted_lists != undefined) {
                    this.sorted_lists = data.sorted_lists;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_1.arike_pb.StatusCode.OK) as dependency_1.arike_pb.StatusCode;
        }
        set status(value: dependency_1.arike_pb.StatusCode) {
            pb_1.Message.setField(this, 1, value);
        }
        get sorted_lists() {
            return pb_1.Message.getRepeatedWrapperField(this, SortedListMeta, 2) as SortedListMeta[];
        }
        set sorted_lists(value: SortedListMeta[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            status?: dependency_1.arike_pb.StatusCode;
            sorted_lists?: ReturnType<typeof SortedListMeta.prototype.toObject>[];
        }): ListSortedListsResponse {
            const message = new ListSortedListsResponse({});
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.sorted_lists != null) {
                message.sorted_lists = data.sorted_lists.map(item => SortedListMeta.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                status?: dependency_1.arike_pb.StatusCode;
                sorted_lists?: ReturnType<typeof SortedListMeta.prototype.toObject>[];
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.sorted_lists != null) {
                data.sorted_lists = this.sorted_lists.map((item: SortedListMeta) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != dependency_1.arike_pb.StatusCode.OK)
                writer.writeEnum(1, this.status);
            if (this.sorted_lists.length)
                writer.writeRepeatedMessage(2, this.sorted_lists, (item: SortedListMeta) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListSortedListsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListSortedListsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.sorted_lists, () => pb_1.Message.addToRepeatedWrapperField(message, 2, SortedListMeta.deserialize(reader), SortedListMeta));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListSortedListsResponse {
            return ListSortedListsResponse.deserialize(bytes);
        }
    }
    export class InsertSortedListsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            collection?: string;
            values?: SortedListValue[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("collection" in data && data.collection != undefined) {
                    this.collection = data.collection;
                }
                if ("values" in data && data.values != undefined) {
                    this.values = data.values;
                }
            }
        }
        get collection() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set collection(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get values() {
            return pb_1.Message.getRepeatedWrapperField(this, SortedListValue, 2) as SortedListValue[];
        }
        set values(value: SortedListValue[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            collection?: string;
            values?: ReturnType<typeof SortedListValue.prototype.toObject>[];
        }): InsertSortedListsRequest {
            const message = new InsertSortedListsRequest({});
            if (data.collection != null) {
                message.collection = data.collection;
            }
            if (data.values != null) {
                message.values = data.values.map(item => SortedListValue.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                collection?: string;
                values?: ReturnType<typeof SortedListValue.prototype.toObject>[];
            } = {};
            if (this.collection != null) {
                data.collection = this.collection;
            }
            if (this.values != null) {
                data.values = this.values.map((item: SortedListValue) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.collection.length)
                writer.writeString(1, this.collection);
            if (this.values.length)
                writer.writeRepeatedMessage(2, this.values, (item: SortedListValue) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InsertSortedListsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InsertSortedListsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.collection = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.values, () => pb_1.Message.addToRepeatedWrapperField(message, 2, SortedListValue.deserialize(reader), SortedListValue));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InsertSortedListsRequest {
            return InsertSortedListsRequest.deserialize(bytes);
        }
    }
    export class InsertSortedListsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: dependency_1.arike_pb.StatusCode;
            not_found?: string[];
            invalid_type?: string[];
            non_inserted?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3, 4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("not_found" in data && data.not_found != undefined) {
                    this.not_found = data.not_found;
                }
                if ("invalid_type" in data && data.invalid_type != undefined) {
                    this.invalid_type = data.invalid_type;
                }
                if ("non_inserted" in data && data.non_inserted != undefined) {
                    this.non_inserted = data.non_inserted;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_1.arike_pb.StatusCode.OK) as dependency_1.arike_pb.StatusCode;
        }
        set status(value: dependency_1.arike_pb.StatusCode) {
            pb_1.Message.setField(this, 1, value);
        }
        get not_found() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set not_found(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get invalid_type() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set invalid_type(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get non_inserted() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as number[];
        }
        set non_inserted(value: number[]) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            status?: dependency_1.arike_pb.StatusCode;
            not_found?: string[];
            invalid_type?: string[];
            non_inserted?: number[];
        }): InsertSortedListsResponse {
            const message = new InsertSortedListsResponse({});
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.not_found != null) {
                message.not_found = data.not_found;
            }
            if (data.invalid_type != null) {
                message.invalid_type = data.invalid_type;
            }
            if (data.non_inserted != null) {
                message.non_inserted = data.non_inserted;
            }
            return message;
        }
        toObject() {
            const data: {
                status?: dependency_1.arike_pb.StatusCode;
                not_found?: string[];
                invalid_type?: string[];
                non_inserted?: number[];
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.not_found != null) {
                data.not_found = this.not_found;
            }
            if (this.invalid_type != null) {
                data.invalid_type = this.invalid_type;
            }
            if (this.non_inserted != null) {
                data.non_inserted = this.non_inserted;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != dependency_1.arike_pb.StatusCode.OK)
                writer.writeEnum(1, this.status);
            if (this.not_found.length)
                writer.writeRepeatedString(2, this.not_found);
            if (this.invalid_type.length)
                writer.writeRepeatedString(3, this.invalid_type);
            if (this.non_inserted.length)
                writer.writePackedUint64(4, this.non_inserted);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InsertSortedListsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InsertSortedListsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readEnum();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    case 4:
                        message.non_inserted = reader.readPackedUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InsertSortedListsResponse {
            return InsertSortedListsResponse.deserialize(bytes);
        }
    }
    export class BiggestSortedListsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            collection?: string;
            names_counts?: SortedListNamesCount[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("collection" in data && data.collection != undefined) {
                    this.collection = data.collection;
                }
                if ("names_counts" in data && data.names_counts != undefined) {
                    this.names_counts = data.names_counts;
                }
            }
        }
        get collection() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set collection(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get names_counts() {
            return pb_1.Message.getRepeatedWrapperField(this, SortedListNamesCount, 2) as SortedListNamesCount[];
        }
        set names_counts(value: SortedListNamesCount[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            collection?: string;
            names_counts?: ReturnType<typeof SortedListNamesCount.prototype.toObject>[];
        }): BiggestSortedListsRequest {
            const message = new BiggestSortedListsRequest({});
            if (data.collection != null) {
                message.collection = data.collection;
            }
            if (data.names_counts != null) {
                message.names_counts = data.names_counts.map(item => SortedListNamesCount.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                collection?: string;
                names_counts?: ReturnType<typeof SortedListNamesCount.prototype.toObject>[];
            } = {};
            if (this.collection != null) {
                data.collection = this.collection;
            }
            if (this.names_counts != null) {
                data.names_counts = this.names_counts.map((item: SortedListNamesCount) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.collection.length)
                writer.writeString(1, this.collection);
            if (this.names_counts.length)
                writer.writeRepeatedMessage(2, this.names_counts, (item: SortedListNamesCount) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BiggestSortedListsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BiggestSortedListsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.collection = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.names_counts, () => pb_1.Message.addToRepeatedWrapperField(message, 2, SortedListNamesCount.deserialize(reader), SortedListNamesCount));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BiggestSortedListsRequest {
            return BiggestSortedListsRequest.deserialize(bytes);
        }
    }
    export class BiggestSortedListsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: dependency_1.arike_pb.StatusCode;
            values?: SortedListValue[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("values" in data && data.values != undefined) {
                    this.values = data.values;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_1.arike_pb.StatusCode.OK) as dependency_1.arike_pb.StatusCode;
        }
        set status(value: dependency_1.arike_pb.StatusCode) {
            pb_1.Message.setField(this, 1, value);
        }
        get values() {
            return pb_1.Message.getRepeatedWrapperField(this, SortedListValue, 2) as SortedListValue[];
        }
        set values(value: SortedListValue[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            status?: dependency_1.arike_pb.StatusCode;
            values?: ReturnType<typeof SortedListValue.prototype.toObject>[];
        }): BiggestSortedListsResponse {
            const message = new BiggestSortedListsResponse({});
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.values != null) {
                message.values = data.values.map(item => SortedListValue.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                status?: dependency_1.arike_pb.StatusCode;
                values?: ReturnType<typeof SortedListValue.prototype.toObject>[];
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.values != null) {
                data.values = this.values.map((item: SortedListValue) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != dependency_1.arike_pb.StatusCode.OK)
                writer.writeEnum(1, this.status);
            if (this.values.length)
                writer.writeRepeatedMessage(2, this.values, (item: SortedListValue) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BiggestSortedListsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BiggestSortedListsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.values, () => pb_1.Message.addToRepeatedWrapperField(message, 2, SortedListValue.deserialize(reader), SortedListValue));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BiggestSortedListsResponse {
            return BiggestSortedListsResponse.deserialize(bytes);
        }
    }
    export class SmallestSortedListsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            collection?: string;
            names_counts?: SortedListNamesCount[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("collection" in data && data.collection != undefined) {
                    this.collection = data.collection;
                }
                if ("names_counts" in data && data.names_counts != undefined) {
                    this.names_counts = data.names_counts;
                }
            }
        }
        get collection() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set collection(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get names_counts() {
            return pb_1.Message.getRepeatedWrapperField(this, SortedListNamesCount, 2) as SortedListNamesCount[];
        }
        set names_counts(value: SortedListNamesCount[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            collection?: string;
            names_counts?: ReturnType<typeof SortedListNamesCount.prototype.toObject>[];
        }): SmallestSortedListsRequest {
            const message = new SmallestSortedListsRequest({});
            if (data.collection != null) {
                message.collection = data.collection;
            }
            if (data.names_counts != null) {
                message.names_counts = data.names_counts.map(item => SortedListNamesCount.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                collection?: string;
                names_counts?: ReturnType<typeof SortedListNamesCount.prototype.toObject>[];
            } = {};
            if (this.collection != null) {
                data.collection = this.collection;
            }
            if (this.names_counts != null) {
                data.names_counts = this.names_counts.map((item: SortedListNamesCount) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.collection.length)
                writer.writeString(1, this.collection);
            if (this.names_counts.length)
                writer.writeRepeatedMessage(2, this.names_counts, (item: SortedListNamesCount) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SmallestSortedListsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SmallestSortedListsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.collection = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.names_counts, () => pb_1.Message.addToRepeatedWrapperField(message, 2, SortedListNamesCount.deserialize(reader), SortedListNamesCount));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SmallestSortedListsRequest {
            return SmallestSortedListsRequest.deserialize(bytes);
        }
    }
    export class SmallestSortedListsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: dependency_1.arike_pb.StatusCode;
            values?: SortedListValue[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("values" in data && data.values != undefined) {
                    this.values = data.values;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_1.arike_pb.StatusCode.OK) as dependency_1.arike_pb.StatusCode;
        }
        set status(value: dependency_1.arike_pb.StatusCode) {
            pb_1.Message.setField(this, 1, value);
        }
        get values() {
            return pb_1.Message.getRepeatedWrapperField(this, SortedListValue, 2) as SortedListValue[];
        }
        set values(value: SortedListValue[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            status?: dependency_1.arike_pb.StatusCode;
            values?: ReturnType<typeof SortedListValue.prototype.toObject>[];
        }): SmallestSortedListsResponse {
            const message = new SmallestSortedListsResponse({});
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.values != null) {
                message.values = data.values.map(item => SortedListValue.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                status?: dependency_1.arike_pb.StatusCode;
                values?: ReturnType<typeof SortedListValue.prototype.toObject>[];
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.values != null) {
                data.values = this.values.map((item: SortedListValue) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != dependency_1.arike_pb.StatusCode.OK)
                writer.writeEnum(1, this.status);
            if (this.values.length)
                writer.writeRepeatedMessage(2, this.values, (item: SortedListValue) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SmallestSortedListsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SmallestSortedListsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.values, () => pb_1.Message.addToRepeatedWrapperField(message, 2, SortedListValue.deserialize(reader), SortedListValue));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SmallestSortedListsResponse {
            return SmallestSortedListsResponse.deserialize(bytes);
        }
    }
}
