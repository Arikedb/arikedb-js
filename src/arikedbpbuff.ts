/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: arikedbpbuff.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace arikedbpbuff {
    export enum VarType {
        I8 = 0,
        I16 = 1,
        I32 = 2,
        I64 = 3,
        I128 = 4,
        U8 = 5,
        U16 = 6,
        U32 = 7,
        U64 = 8,
        U128 = 9,
        F32 = 10,
        F64 = 11,
        STR = 12,
        BOOL = 13
    }
    export enum Epoch {
        SEC = 0,
        MS = 1,
        US = 2,
        NS = 3
    }
    export enum Event {
        ON_SET = 0,
        ON_CHANGE = 1,
        ON_RISE = 2,
        ON_FALL = 3,
        ON_VALUE_REACH_VAL = 4,
        ON_VALUE_EQ_VAL = 5,
        ON_VALUE_LEAVE_VAL = 6,
        ON_VALUE_DIFF_VAL = 7,
        ON_CROSS_HIGH_LIMIT = 8,
        ON_CROSS_LOW_LIMIT = 9,
        ON_OVER_HIGH_LIMIT = 10,
        ON_UNDER_LOW_LIMIT = 11,
        ON_VALUE_REACH_RANGE = 12,
        ON_VALUE_IN_RANGE = 13,
        ON_VALUE_LEAVE_RANGE = 14,
        ON_VALUE_OUT_RANGE = 15
    }
    export enum StatusCode {
        OK = 0,
        LICENSE_EXPIRED = 1,
        LICENSE_LIMITS_EXCEEDED = 2,
        SESSION_EXPIRED = 3,
        INTERNAL_ERROR = 4,
        UNAUTHORIZED = 5,
        UNAUTHENTICATED = 6,
        COLLECTION_NOT_FOUND = 7,
        INVALID_REQUEST = 8
    }
    export class VariableEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            event?: Event;
            value?: string;
            low_limit?: string;
            high_limit?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("event" in data && data.event != undefined) {
                    this.event = data.event;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
                if ("low_limit" in data && data.low_limit != undefined) {
                    this.low_limit = data.low_limit;
                }
                if ("high_limit" in data && data.high_limit != undefined) {
                    this.high_limit = data.high_limit;
                }
            }
        }
        get event() {
            return pb_1.Message.getFieldWithDefault(this, 1, Event.ON_SET) as Event;
        }
        set event(value: Event) {
            pb_1.Message.setField(this, 1, value);
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set value(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get low_limit() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set low_limit(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get high_limit() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set high_limit(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            event?: Event;
            value?: string;
            low_limit?: string;
            high_limit?: string;
        }): VariableEvent {
            const message = new VariableEvent({});
            if (data.event != null) {
                message.event = data.event;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            if (data.low_limit != null) {
                message.low_limit = data.low_limit;
            }
            if (data.high_limit != null) {
                message.high_limit = data.high_limit;
            }
            return message;
        }
        toObject() {
            const data: {
                event?: Event;
                value?: string;
                low_limit?: string;
                high_limit?: string;
            } = {};
            if (this.event != null) {
                data.event = this.event;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            if (this.low_limit != null) {
                data.low_limit = this.low_limit;
            }
            if (this.high_limit != null) {
                data.high_limit = this.high_limit;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.event != Event.ON_SET)
                writer.writeEnum(1, this.event);
            if (this.value.length)
                writer.writeString(2, this.value);
            if (this.low_limit.length)
                writer.writeString(3, this.low_limit);
            if (this.high_limit.length)
                writer.writeString(4, this.high_limit);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VariableEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VariableEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.event = reader.readEnum();
                        break;
                    case 2:
                        message.value = reader.readString();
                        break;
                    case 3:
                        message.low_limit = reader.readString();
                        break;
                    case 4:
                        message.high_limit = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VariableEvent {
            return VariableEvent.deserialize(bytes);
        }
    }
    export class CollectionMeta extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            name?: string;
        }): CollectionMeta {
            const message = new CollectionMeta({});
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CollectionMeta {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CollectionMeta();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CollectionMeta {
            return CollectionMeta.deserialize(bytes);
        }
    }
    export class VariableMeta extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            vtype?: VarType;
            buffer_size?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("vtype" in data && data.vtype != undefined) {
                    this.vtype = data.vtype;
                }
                if ("buffer_size" in data && data.buffer_size != undefined) {
                    this.buffer_size = data.buffer_size;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get vtype() {
            return pb_1.Message.getFieldWithDefault(this, 2, VarType.I8) as VarType;
        }
        set vtype(value: VarType) {
            pb_1.Message.setField(this, 2, value);
        }
        get buffer_size() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set buffer_size(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            name?: string;
            vtype?: VarType;
            buffer_size?: number;
        }): VariableMeta {
            const message = new VariableMeta({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.vtype != null) {
                message.vtype = data.vtype;
            }
            if (data.buffer_size != null) {
                message.buffer_size = data.buffer_size;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                vtype?: VarType;
                buffer_size?: number;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.vtype != null) {
                data.vtype = this.vtype;
            }
            if (this.buffer_size != null) {
                data.buffer_size = this.buffer_size;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.vtype != VarType.I8)
                writer.writeEnum(2, this.vtype);
            if (this.buffer_size != 0)
                writer.writeUint32(3, this.buffer_size);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VariableMeta {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VariableMeta();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.vtype = reader.readEnum();
                        break;
                    case 3:
                        message.buffer_size = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VariableMeta {
            return VariableMeta.deserialize(bytes);
        }
    }
    export class VarDataPoint extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            vtype?: VarType;
            timestamp?: string;
            epoch?: Epoch;
            value?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("vtype" in data && data.vtype != undefined) {
                    this.vtype = data.vtype;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("epoch" in data && data.epoch != undefined) {
                    this.epoch = data.epoch;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get vtype() {
            return pb_1.Message.getFieldWithDefault(this, 2, VarType.I8) as VarType;
        }
        set vtype(value: VarType) {
            pb_1.Message.setField(this, 2, value);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set timestamp(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get epoch() {
            return pb_1.Message.getFieldWithDefault(this, 4, Epoch.SEC) as Epoch;
        }
        set epoch(value: Epoch) {
            pb_1.Message.setField(this, 4, value);
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set value(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            name?: string;
            vtype?: VarType;
            timestamp?: string;
            epoch?: Epoch;
            value?: string;
        }): VarDataPoint {
            const message = new VarDataPoint({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.vtype != null) {
                message.vtype = data.vtype;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            if (data.epoch != null) {
                message.epoch = data.epoch;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                vtype?: VarType;
                timestamp?: string;
                epoch?: Epoch;
                value?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.vtype != null) {
                data.vtype = this.vtype;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            if (this.epoch != null) {
                data.epoch = this.epoch;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.vtype != VarType.I8)
                writer.writeEnum(2, this.vtype);
            if (this.timestamp.length)
                writer.writeString(3, this.timestamp);
            if (this.epoch != Epoch.SEC)
                writer.writeEnum(4, this.epoch);
            if (this.value.length)
                writer.writeString(5, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VarDataPoint {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VarDataPoint();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.vtype = reader.readEnum();
                        break;
                    case 3:
                        message.timestamp = reader.readString();
                        break;
                    case 4:
                        message.epoch = reader.readEnum();
                        break;
                    case 5:
                        message.value = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VarDataPoint {
            return VarDataPoint.deserialize(bytes);
        }
    }
    export class CreateCollectionsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            collections?: CollectionMeta[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("collections" in data && data.collections != undefined) {
                    this.collections = data.collections;
                }
            }
        }
        get collections() {
            return pb_1.Message.getRepeatedWrapperField(this, CollectionMeta, 1) as CollectionMeta[];
        }
        set collections(value: CollectionMeta[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            collections?: ReturnType<typeof CollectionMeta.prototype.toObject>[];
        }): CreateCollectionsRequest {
            const message = new CreateCollectionsRequest({});
            if (data.collections != null) {
                message.collections = data.collections.map(item => CollectionMeta.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                collections?: ReturnType<typeof CollectionMeta.prototype.toObject>[];
            } = {};
            if (this.collections != null) {
                data.collections = this.collections.map((item: CollectionMeta) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.collections.length)
                writer.writeRepeatedMessage(1, this.collections, (item: CollectionMeta) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateCollectionsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateCollectionsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.collections, () => pb_1.Message.addToRepeatedWrapperField(message, 1, CollectionMeta.deserialize(reader), CollectionMeta));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateCollectionsRequest {
            return CreateCollectionsRequest.deserialize(bytes);
        }
    }
    export class CreateCollectionsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: StatusCode;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, StatusCode.OK) as StatusCode;
        }
        set status(value: StatusCode) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            status?: StatusCode;
        }): CreateCollectionsResponse {
            const message = new CreateCollectionsResponse({});
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                status?: StatusCode;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != StatusCode.OK)
                writer.writeEnum(1, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateCollectionsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateCollectionsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateCollectionsResponse {
            return CreateCollectionsResponse.deserialize(bytes);
        }
    }
    export class DeleteCollectionsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            names?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("names" in data && data.names != undefined) {
                    this.names = data.names;
                }
            }
        }
        get names() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set names(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            names?: string[];
        }): DeleteCollectionsRequest {
            const message = new DeleteCollectionsRequest({});
            if (data.names != null) {
                message.names = data.names;
            }
            return message;
        }
        toObject() {
            const data: {
                names?: string[];
            } = {};
            if (this.names != null) {
                data.names = this.names;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.names.length)
                writer.writeRepeatedString(1, this.names);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteCollectionsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteCollectionsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteCollectionsRequest {
            return DeleteCollectionsRequest.deserialize(bytes);
        }
    }
    export class DeleteCollectionsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: StatusCode;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, StatusCode.OK) as StatusCode;
        }
        set status(value: StatusCode) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            status?: StatusCode;
        }): DeleteCollectionsResponse {
            const message = new DeleteCollectionsResponse({});
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                status?: StatusCode;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != StatusCode.OK)
                writer.writeEnum(1, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteCollectionsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteCollectionsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteCollectionsResponse {
            return DeleteCollectionsResponse.deserialize(bytes);
        }
    }
    export class ListCollectionsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): ListCollectionsRequest {
            const message = new ListCollectionsRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListCollectionsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListCollectionsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListCollectionsRequest {
            return ListCollectionsRequest.deserialize(bytes);
        }
    }
    export class ListCollectionsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: StatusCode;
            collections?: CollectionMeta[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("collections" in data && data.collections != undefined) {
                    this.collections = data.collections;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, StatusCode.OK) as StatusCode;
        }
        set status(value: StatusCode) {
            pb_1.Message.setField(this, 1, value);
        }
        get collections() {
            return pb_1.Message.getRepeatedWrapperField(this, CollectionMeta, 2) as CollectionMeta[];
        }
        set collections(value: CollectionMeta[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            status?: StatusCode;
            collections?: ReturnType<typeof CollectionMeta.prototype.toObject>[];
        }): ListCollectionsResponse {
            const message = new ListCollectionsResponse({});
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.collections != null) {
                message.collections = data.collections.map(item => CollectionMeta.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                status?: StatusCode;
                collections?: ReturnType<typeof CollectionMeta.prototype.toObject>[];
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.collections != null) {
                data.collections = this.collections.map((item: CollectionMeta) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != StatusCode.OK)
                writer.writeEnum(1, this.status);
            if (this.collections.length)
                writer.writeRepeatedMessage(2, this.collections, (item: CollectionMeta) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListCollectionsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListCollectionsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.collections, () => pb_1.Message.addToRepeatedWrapperField(message, 2, CollectionMeta.deserialize(reader), CollectionMeta));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListCollectionsResponse {
            return ListCollectionsResponse.deserialize(bytes);
        }
    }
    export class CreateVariablesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            collection?: string;
            variables?: VariableMeta[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("collection" in data && data.collection != undefined) {
                    this.collection = data.collection;
                }
                if ("variables" in data && data.variables != undefined) {
                    this.variables = data.variables;
                }
            }
        }
        get collection() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set collection(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get variables() {
            return pb_1.Message.getRepeatedWrapperField(this, VariableMeta, 2) as VariableMeta[];
        }
        set variables(value: VariableMeta[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            collection?: string;
            variables?: ReturnType<typeof VariableMeta.prototype.toObject>[];
        }): CreateVariablesRequest {
            const message = new CreateVariablesRequest({});
            if (data.collection != null) {
                message.collection = data.collection;
            }
            if (data.variables != null) {
                message.variables = data.variables.map(item => VariableMeta.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                collection?: string;
                variables?: ReturnType<typeof VariableMeta.prototype.toObject>[];
            } = {};
            if (this.collection != null) {
                data.collection = this.collection;
            }
            if (this.variables != null) {
                data.variables = this.variables.map((item: VariableMeta) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.collection.length)
                writer.writeString(1, this.collection);
            if (this.variables.length)
                writer.writeRepeatedMessage(2, this.variables, (item: VariableMeta) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateVariablesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateVariablesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.collection = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.variables, () => pb_1.Message.addToRepeatedWrapperField(message, 2, VariableMeta.deserialize(reader), VariableMeta));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateVariablesRequest {
            return CreateVariablesRequest.deserialize(bytes);
        }
    }
    export class CreateVariablesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: StatusCode;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, StatusCode.OK) as StatusCode;
        }
        set status(value: StatusCode) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            status?: StatusCode;
        }): CreateVariablesResponse {
            const message = new CreateVariablesResponse({});
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                status?: StatusCode;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != StatusCode.OK)
                writer.writeEnum(1, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateVariablesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateVariablesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateVariablesResponse {
            return CreateVariablesResponse.deserialize(bytes);
        }
    }
    export class DeleteVariablesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            collection?: string;
            names?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("collection" in data && data.collection != undefined) {
                    this.collection = data.collection;
                }
                if ("names" in data && data.names != undefined) {
                    this.names = data.names;
                }
            }
        }
        get collection() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set collection(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get names() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set names(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            collection?: string;
            names?: string[];
        }): DeleteVariablesRequest {
            const message = new DeleteVariablesRequest({});
            if (data.collection != null) {
                message.collection = data.collection;
            }
            if (data.names != null) {
                message.names = data.names;
            }
            return message;
        }
        toObject() {
            const data: {
                collection?: string;
                names?: string[];
            } = {};
            if (this.collection != null) {
                data.collection = this.collection;
            }
            if (this.names != null) {
                data.names = this.names;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.collection.length)
                writer.writeString(1, this.collection);
            if (this.names.length)
                writer.writeRepeatedString(2, this.names);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteVariablesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteVariablesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.collection = reader.readString();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteVariablesRequest {
            return DeleteVariablesRequest.deserialize(bytes);
        }
    }
    export class DeleteVariablesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: StatusCode;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, StatusCode.OK) as StatusCode;
        }
        set status(value: StatusCode) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            status?: StatusCode;
        }): DeleteVariablesResponse {
            const message = new DeleteVariablesResponse({});
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                status?: StatusCode;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != StatusCode.OK)
                writer.writeEnum(1, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteVariablesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteVariablesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteVariablesResponse {
            return DeleteVariablesResponse.deserialize(bytes);
        }
    }
    export class ListVariablesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            collection?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("collection" in data && data.collection != undefined) {
                    this.collection = data.collection;
                }
            }
        }
        get collection() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set collection(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            collection?: string;
        }): ListVariablesRequest {
            const message = new ListVariablesRequest({});
            if (data.collection != null) {
                message.collection = data.collection;
            }
            return message;
        }
        toObject() {
            const data: {
                collection?: string;
            } = {};
            if (this.collection != null) {
                data.collection = this.collection;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.collection.length)
                writer.writeString(1, this.collection);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListVariablesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListVariablesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.collection = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListVariablesRequest {
            return ListVariablesRequest.deserialize(bytes);
        }
    }
    export class ListVariablesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: StatusCode;
            variables?: VariableMeta[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("variables" in data && data.variables != undefined) {
                    this.variables = data.variables;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, StatusCode.OK) as StatusCode;
        }
        set status(value: StatusCode) {
            pb_1.Message.setField(this, 1, value);
        }
        get variables() {
            return pb_1.Message.getRepeatedWrapperField(this, VariableMeta, 2) as VariableMeta[];
        }
        set variables(value: VariableMeta[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            status?: StatusCode;
            variables?: ReturnType<typeof VariableMeta.prototype.toObject>[];
        }): ListVariablesResponse {
            const message = new ListVariablesResponse({});
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.variables != null) {
                message.variables = data.variables.map(item => VariableMeta.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                status?: StatusCode;
                variables?: ReturnType<typeof VariableMeta.prototype.toObject>[];
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.variables != null) {
                data.variables = this.variables.map((item: VariableMeta) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != StatusCode.OK)
                writer.writeEnum(1, this.status);
            if (this.variables.length)
                writer.writeRepeatedMessage(2, this.variables, (item: VariableMeta) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListVariablesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListVariablesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.variables, () => pb_1.Message.addToRepeatedWrapperField(message, 2, VariableMeta.deserialize(reader), VariableMeta));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListVariablesResponse {
            return ListVariablesResponse.deserialize(bytes);
        }
    }
    export class SetVariablesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            collection?: string;
            names?: string[];
            values?: string[];
            timestamp?: string;
            epoch?: Epoch;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("collection" in data && data.collection != undefined) {
                    this.collection = data.collection;
                }
                if ("names" in data && data.names != undefined) {
                    this.names = data.names;
                }
                if ("values" in data && data.values != undefined) {
                    this.values = data.values;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("epoch" in data && data.epoch != undefined) {
                    this.epoch = data.epoch;
                }
            }
        }
        get collection() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set collection(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get names() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set names(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get values() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set values(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set timestamp(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get epoch() {
            return pb_1.Message.getFieldWithDefault(this, 5, Epoch.SEC) as Epoch;
        }
        set epoch(value: Epoch) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            collection?: string;
            names?: string[];
            values?: string[];
            timestamp?: string;
            epoch?: Epoch;
        }): SetVariablesRequest {
            const message = new SetVariablesRequest({});
            if (data.collection != null) {
                message.collection = data.collection;
            }
            if (data.names != null) {
                message.names = data.names;
            }
            if (data.values != null) {
                message.values = data.values;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            if (data.epoch != null) {
                message.epoch = data.epoch;
            }
            return message;
        }
        toObject() {
            const data: {
                collection?: string;
                names?: string[];
                values?: string[];
                timestamp?: string;
                epoch?: Epoch;
            } = {};
            if (this.collection != null) {
                data.collection = this.collection;
            }
            if (this.names != null) {
                data.names = this.names;
            }
            if (this.values != null) {
                data.values = this.values;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            if (this.epoch != null) {
                data.epoch = this.epoch;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.collection.length)
                writer.writeString(1, this.collection);
            if (this.names.length)
                writer.writeRepeatedString(2, this.names);
            if (this.values.length)
                writer.writeRepeatedString(3, this.values);
            if (this.timestamp.length)
                writer.writeString(4, this.timestamp);
            if (this.epoch != Epoch.SEC)
                writer.writeEnum(5, this.epoch);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetVariablesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetVariablesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.collection = reader.readString();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    case 4:
                        message.timestamp = reader.readString();
                        break;
                    case 5:
                        message.epoch = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetVariablesRequest {
            return SetVariablesRequest.deserialize(bytes);
        }
    }
    export class SetVariablesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: StatusCode;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, StatusCode.OK) as StatusCode;
        }
        set status(value: StatusCode) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            status?: StatusCode;
        }): SetVariablesResponse {
            const message = new SetVariablesResponse({});
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                status?: StatusCode;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != StatusCode.OK)
                writer.writeEnum(1, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetVariablesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetVariablesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetVariablesResponse {
            return SetVariablesResponse.deserialize(bytes);
        }
    }
    export class GetVariablesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            collection?: string;
            names?: string[];
            derived_order?: number;
            epoch?: Epoch;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("collection" in data && data.collection != undefined) {
                    this.collection = data.collection;
                }
                if ("names" in data && data.names != undefined) {
                    this.names = data.names;
                }
                if ("derived_order" in data && data.derived_order != undefined) {
                    this.derived_order = data.derived_order;
                }
                if ("epoch" in data && data.epoch != undefined) {
                    this.epoch = data.epoch;
                }
            }
        }
        get collection() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set collection(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get names() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set names(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get derived_order() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set derived_order(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get epoch() {
            return pb_1.Message.getFieldWithDefault(this, 4, Epoch.SEC) as Epoch;
        }
        set epoch(value: Epoch) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            collection?: string;
            names?: string[];
            derived_order?: number;
            epoch?: Epoch;
        }): GetVariablesRequest {
            const message = new GetVariablesRequest({});
            if (data.collection != null) {
                message.collection = data.collection;
            }
            if (data.names != null) {
                message.names = data.names;
            }
            if (data.derived_order != null) {
                message.derived_order = data.derived_order;
            }
            if (data.epoch != null) {
                message.epoch = data.epoch;
            }
            return message;
        }
        toObject() {
            const data: {
                collection?: string;
                names?: string[];
                derived_order?: number;
                epoch?: Epoch;
            } = {};
            if (this.collection != null) {
                data.collection = this.collection;
            }
            if (this.names != null) {
                data.names = this.names;
            }
            if (this.derived_order != null) {
                data.derived_order = this.derived_order;
            }
            if (this.epoch != null) {
                data.epoch = this.epoch;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.collection.length)
                writer.writeString(1, this.collection);
            if (this.names.length)
                writer.writeRepeatedString(2, this.names);
            if (this.derived_order != 0)
                writer.writeUint32(3, this.derived_order);
            if (this.epoch != Epoch.SEC)
                writer.writeEnum(4, this.epoch);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetVariablesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetVariablesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.collection = reader.readString();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    case 3:
                        message.derived_order = reader.readUint32();
                        break;
                    case 4:
                        message.epoch = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetVariablesRequest {
            return GetVariablesRequest.deserialize(bytes);
        }
    }
    export class GetVariablesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: StatusCode;
            points?: VarDataPoint[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("points" in data && data.points != undefined) {
                    this.points = data.points;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, StatusCode.OK) as StatusCode;
        }
        set status(value: StatusCode) {
            pb_1.Message.setField(this, 1, value);
        }
        get points() {
            return pb_1.Message.getRepeatedWrapperField(this, VarDataPoint, 2) as VarDataPoint[];
        }
        set points(value: VarDataPoint[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            status?: StatusCode;
            points?: ReturnType<typeof VarDataPoint.prototype.toObject>[];
        }): GetVariablesResponse {
            const message = new GetVariablesResponse({});
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.points != null) {
                message.points = data.points.map(item => VarDataPoint.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                status?: StatusCode;
                points?: ReturnType<typeof VarDataPoint.prototype.toObject>[];
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.points != null) {
                data.points = this.points.map((item: VarDataPoint) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != StatusCode.OK)
                writer.writeEnum(1, this.status);
            if (this.points.length)
                writer.writeRepeatedMessage(2, this.points, (item: VarDataPoint) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetVariablesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetVariablesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.points, () => pb_1.Message.addToRepeatedWrapperField(message, 2, VarDataPoint.deserialize(reader), VarDataPoint));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetVariablesResponse {
            return GetVariablesResponse.deserialize(bytes);
        }
    }
    export class SubscribeVariablesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            collection?: string;
            names?: string[];
            events?: VariableEvent[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("collection" in data && data.collection != undefined) {
                    this.collection = data.collection;
                }
                if ("names" in data && data.names != undefined) {
                    this.names = data.names;
                }
                if ("events" in data && data.events != undefined) {
                    this.events = data.events;
                }
            }
        }
        get collection() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set collection(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get names() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set names(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get events() {
            return pb_1.Message.getRepeatedWrapperField(this, VariableEvent, 3) as VariableEvent[];
        }
        set events(value: VariableEvent[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            collection?: string;
            names?: string[];
            events?: ReturnType<typeof VariableEvent.prototype.toObject>[];
        }): SubscribeVariablesRequest {
            const message = new SubscribeVariablesRequest({});
            if (data.collection != null) {
                message.collection = data.collection;
            }
            if (data.names != null) {
                message.names = data.names;
            }
            if (data.events != null) {
                message.events = data.events.map(item => VariableEvent.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                collection?: string;
                names?: string[];
                events?: ReturnType<typeof VariableEvent.prototype.toObject>[];
            } = {};
            if (this.collection != null) {
                data.collection = this.collection;
            }
            if (this.names != null) {
                data.names = this.names;
            }
            if (this.events != null) {
                data.events = this.events.map((item: VariableEvent) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.collection.length)
                writer.writeString(1, this.collection);
            if (this.names.length)
                writer.writeRepeatedString(2, this.names);
            if (this.events.length)
                writer.writeRepeatedMessage(3, this.events, (item: VariableEvent) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SubscribeVariablesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SubscribeVariablesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.collection = reader.readString();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    case 3:
                        reader.readMessage(message.events, () => pb_1.Message.addToRepeatedWrapperField(message, 3, VariableEvent.deserialize(reader), VariableEvent));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SubscribeVariablesRequest {
            return SubscribeVariablesRequest.deserialize(bytes);
        }
    }
    export class AuthenticateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            username?: string;
            password?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("username" in data && data.username != undefined) {
                    this.username = data.username;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
            }
        }
        get username() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set username(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            username?: string;
            password?: string;
        }): AuthenticateRequest {
            const message = new AuthenticateRequest({});
            if (data.username != null) {
                message.username = data.username;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            return message;
        }
        toObject() {
            const data: {
                username?: string;
                password?: string;
            } = {};
            if (this.username != null) {
                data.username = this.username;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.username.length)
                writer.writeString(1, this.username);
            if (this.password.length)
                writer.writeString(2, this.password);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthenticateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthenticateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.username = reader.readString();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AuthenticateRequest {
            return AuthenticateRequest.deserialize(bytes);
        }
    }
    export class AuthenticateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: StatusCode;
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, StatusCode.OK) as StatusCode;
        }
        set status(value: StatusCode) {
            pb_1.Message.setField(this, 1, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            status?: StatusCode;
            token?: string;
        }): AuthenticateResponse {
            const message = new AuthenticateResponse({});
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                status?: StatusCode;
                token?: string;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != StatusCode.OK)
                writer.writeEnum(1, this.status);
            if (this.token.length)
                writer.writeString(2, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthenticateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthenticateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readEnum();
                        break;
                    case 2:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AuthenticateResponse {
            return AuthenticateResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedArikedbRPCService {
        static definition = {
            CreateCollections: {
                path: "/arikedbpbuff.ArikedbRPC/CreateCollections",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateCollectionsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateCollectionsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateCollectionsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateCollectionsResponse.deserialize(new Uint8Array(bytes))
            },
            DeleteCollections: {
                path: "/arikedbpbuff.ArikedbRPC/DeleteCollections",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteCollectionsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteCollectionsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteCollectionsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteCollectionsResponse.deserialize(new Uint8Array(bytes))
            },
            ListCollections: {
                path: "/arikedbpbuff.ArikedbRPC/ListCollections",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListCollectionsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListCollectionsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListCollectionsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListCollectionsResponse.deserialize(new Uint8Array(bytes))
            },
            CreateVariables: {
                path: "/arikedbpbuff.ArikedbRPC/CreateVariables",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateVariablesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateVariablesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: CreateVariablesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => CreateVariablesResponse.deserialize(new Uint8Array(bytes))
            },
            DeleteVariables: {
                path: "/arikedbpbuff.ArikedbRPC/DeleteVariables",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteVariablesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteVariablesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteVariablesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteVariablesResponse.deserialize(new Uint8Array(bytes))
            },
            ListVariables: {
                path: "/arikedbpbuff.ArikedbRPC/ListVariables",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListVariablesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListVariablesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListVariablesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListVariablesResponse.deserialize(new Uint8Array(bytes))
            },
            SetVariables: {
                path: "/arikedbpbuff.ArikedbRPC/SetVariables",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SetVariablesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SetVariablesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SetVariablesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SetVariablesResponse.deserialize(new Uint8Array(bytes))
            },
            GetVariables: {
                path: "/arikedbpbuff.ArikedbRPC/GetVariables",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetVariablesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetVariablesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetVariablesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetVariablesResponse.deserialize(new Uint8Array(bytes))
            },
            SubscribeVariables: {
                path: "/arikedbpbuff.ArikedbRPC/SubscribeVariables",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: SubscribeVariablesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SubscribeVariablesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: VarDataPoint) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => VarDataPoint.deserialize(new Uint8Array(bytes))
            },
            Authenticate: {
                path: "/arikedbpbuff.ArikedbRPC/Authenticate",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AuthenticateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AuthenticateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AuthenticateResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AuthenticateResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract CreateCollections(call: grpc_1.ServerUnaryCall<CreateCollectionsRequest, CreateCollectionsResponse>, callback: grpc_1.sendUnaryData<CreateCollectionsResponse>): void;
        abstract DeleteCollections(call: grpc_1.ServerUnaryCall<DeleteCollectionsRequest, DeleteCollectionsResponse>, callback: grpc_1.sendUnaryData<DeleteCollectionsResponse>): void;
        abstract ListCollections(call: grpc_1.ServerUnaryCall<ListCollectionsRequest, ListCollectionsResponse>, callback: grpc_1.sendUnaryData<ListCollectionsResponse>): void;
        abstract CreateVariables(call: grpc_1.ServerUnaryCall<CreateVariablesRequest, CreateVariablesResponse>, callback: grpc_1.sendUnaryData<CreateVariablesResponse>): void;
        abstract DeleteVariables(call: grpc_1.ServerUnaryCall<DeleteVariablesRequest, DeleteVariablesResponse>, callback: grpc_1.sendUnaryData<DeleteVariablesResponse>): void;
        abstract ListVariables(call: grpc_1.ServerUnaryCall<ListVariablesRequest, ListVariablesResponse>, callback: grpc_1.sendUnaryData<ListVariablesResponse>): void;
        abstract SetVariables(call: grpc_1.ServerUnaryCall<SetVariablesRequest, SetVariablesResponse>, callback: grpc_1.sendUnaryData<SetVariablesResponse>): void;
        abstract GetVariables(call: grpc_1.ServerUnaryCall<GetVariablesRequest, GetVariablesResponse>, callback: grpc_1.sendUnaryData<GetVariablesResponse>): void;
        abstract SubscribeVariables(call: grpc_1.ServerWritableStream<SubscribeVariablesRequest, VarDataPoint>): void;
        abstract Authenticate(call: grpc_1.ServerUnaryCall<AuthenticateRequest, AuthenticateResponse>, callback: grpc_1.sendUnaryData<AuthenticateResponse>): void;
    }
    export class ArikedbRPCClient extends grpc_1.makeGenericClientConstructor(UnimplementedArikedbRPCService.definition, "ArikedbRPC", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        CreateCollections: GrpcUnaryServiceInterface<CreateCollectionsRequest, CreateCollectionsResponse> = (message: CreateCollectionsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateCollectionsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateCollectionsResponse>, callback?: grpc_1.requestCallback<CreateCollectionsResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateCollections(message, metadata, options, callback);
        };
        DeleteCollections: GrpcUnaryServiceInterface<DeleteCollectionsRequest, DeleteCollectionsResponse> = (message: DeleteCollectionsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteCollectionsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteCollectionsResponse>, callback?: grpc_1.requestCallback<DeleteCollectionsResponse>): grpc_1.ClientUnaryCall => {
            return super.DeleteCollections(message, metadata, options, callback);
        };
        ListCollections: GrpcUnaryServiceInterface<ListCollectionsRequest, ListCollectionsResponse> = (message: ListCollectionsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListCollectionsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListCollectionsResponse>, callback?: grpc_1.requestCallback<ListCollectionsResponse>): grpc_1.ClientUnaryCall => {
            return super.ListCollections(message, metadata, options, callback);
        };
        CreateVariables: GrpcUnaryServiceInterface<CreateVariablesRequest, CreateVariablesResponse> = (message: CreateVariablesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateVariablesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateVariablesResponse>, callback?: grpc_1.requestCallback<CreateVariablesResponse>): grpc_1.ClientUnaryCall => {
            return super.CreateVariables(message, metadata, options, callback);
        };
        DeleteVariables: GrpcUnaryServiceInterface<DeleteVariablesRequest, DeleteVariablesResponse> = (message: DeleteVariablesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteVariablesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteVariablesResponse>, callback?: grpc_1.requestCallback<DeleteVariablesResponse>): grpc_1.ClientUnaryCall => {
            return super.DeleteVariables(message, metadata, options, callback);
        };
        ListVariables: GrpcUnaryServiceInterface<ListVariablesRequest, ListVariablesResponse> = (message: ListVariablesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListVariablesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListVariablesResponse>, callback?: grpc_1.requestCallback<ListVariablesResponse>): grpc_1.ClientUnaryCall => {
            return super.ListVariables(message, metadata, options, callback);
        };
        SetVariables: GrpcUnaryServiceInterface<SetVariablesRequest, SetVariablesResponse> = (message: SetVariablesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SetVariablesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SetVariablesResponse>, callback?: grpc_1.requestCallback<SetVariablesResponse>): grpc_1.ClientUnaryCall => {
            return super.SetVariables(message, metadata, options, callback);
        };
        GetVariables: GrpcUnaryServiceInterface<GetVariablesRequest, GetVariablesResponse> = (message: GetVariablesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetVariablesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetVariablesResponse>, callback?: grpc_1.requestCallback<GetVariablesResponse>): grpc_1.ClientUnaryCall => {
            return super.GetVariables(message, metadata, options, callback);
        };
        SubscribeVariables: GrpcStreamServiceInterface<SubscribeVariablesRequest, VarDataPoint> = (message: SubscribeVariablesRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<VarDataPoint> => {
            return super.SubscribeVariables(message, metadata, options);
        };
        Authenticate: GrpcUnaryServiceInterface<AuthenticateRequest, AuthenticateResponse> = (message: AuthenticateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AuthenticateResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AuthenticateResponse>, callback?: grpc_1.requestCallback<AuthenticateResponse>): grpc_1.ClientUnaryCall => {
            return super.Authenticate(message, metadata, options, callback);
        };
    }
}
