/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: arike_ts_variable.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./arike_utils";
import * as pb_1 from "google-protobuf";
export namespace arike_pb {
    export class VariableEvent extends pb_1.Message {
        #one_of_decls: number[][] = [[2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13]];
        constructor(data?: any[] | ({
            event?: dependency_1.arike_pb.Event;
        } & (({
            str_value?: string;
        }) | ({
            str_low_limit?: string;
        }) | ({
            str_high_limit?: string;
        }) | ({
            int_value?: number;
        }) | ({
            int_low_limit?: number;
        }) | ({
            int_high_limit?: number;
        }) | ({
            float_value?: number;
        }) | ({
            float_low_limit?: number;
        }) | ({
            float_high_limit?: number;
        }) | ({
            bool_value?: boolean;
        }) | ({
            bool_low_limit?: boolean;
        }) | ({
            bool_high_limit?: boolean;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("event" in data && data.event != undefined) {
                    this.event = data.event;
                }
                if ("str_value" in data && data.str_value != undefined) {
                    this.str_value = data.str_value;
                }
                if ("str_low_limit" in data && data.str_low_limit != undefined) {
                    this.str_low_limit = data.str_low_limit;
                }
                if ("str_high_limit" in data && data.str_high_limit != undefined) {
                    this.str_high_limit = data.str_high_limit;
                }
                if ("int_value" in data && data.int_value != undefined) {
                    this.int_value = data.int_value;
                }
                if ("int_low_limit" in data && data.int_low_limit != undefined) {
                    this.int_low_limit = data.int_low_limit;
                }
                if ("int_high_limit" in data && data.int_high_limit != undefined) {
                    this.int_high_limit = data.int_high_limit;
                }
                if ("float_value" in data && data.float_value != undefined) {
                    this.float_value = data.float_value;
                }
                if ("float_low_limit" in data && data.float_low_limit != undefined) {
                    this.float_low_limit = data.float_low_limit;
                }
                if ("float_high_limit" in data && data.float_high_limit != undefined) {
                    this.float_high_limit = data.float_high_limit;
                }
                if ("bool_value" in data && data.bool_value != undefined) {
                    this.bool_value = data.bool_value;
                }
                if ("bool_low_limit" in data && data.bool_low_limit != undefined) {
                    this.bool_low_limit = data.bool_low_limit;
                }
                if ("bool_high_limit" in data && data.bool_high_limit != undefined) {
                    this.bool_high_limit = data.bool_high_limit;
                }
            }
        }
        get event() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_1.arike_pb.Event.ON_SET) as dependency_1.arike_pb.Event;
        }
        set event(value: dependency_1.arike_pb.Event) {
            pb_1.Message.setField(this, 1, value);
        }
        get str_value() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set str_value(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_str_value() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get str_low_limit() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set str_low_limit(value: string) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[1], value);
        }
        get has_str_low_limit() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get str_high_limit() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set str_high_limit(value: string) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[2], value);
        }
        get has_str_high_limit() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get int_value() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set int_value(value: number) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[3], value);
        }
        get has_int_value() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get int_low_limit() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set int_low_limit(value: number) {
            pb_1.Message.setOneofField(this, 6, this.#one_of_decls[4], value);
        }
        get has_int_low_limit() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get int_high_limit() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set int_high_limit(value: number) {
            pb_1.Message.setOneofField(this, 7, this.#one_of_decls[5], value);
        }
        get has_int_high_limit() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get float_value() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set float_value(value: number) {
            pb_1.Message.setOneofField(this, 8, this.#one_of_decls[6], value);
        }
        get has_float_value() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get float_low_limit() {
            return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
        }
        set float_low_limit(value: number) {
            pb_1.Message.setOneofField(this, 9, this.#one_of_decls[7], value);
        }
        get has_float_low_limit() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get float_high_limit() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set float_high_limit(value: number) {
            pb_1.Message.setOneofField(this, 10, this.#one_of_decls[8], value);
        }
        get has_float_high_limit() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get bool_value() {
            return pb_1.Message.getFieldWithDefault(this, 11, false) as boolean;
        }
        set bool_value(value: boolean) {
            pb_1.Message.setOneofField(this, 11, this.#one_of_decls[9], value);
        }
        get has_bool_value() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get bool_low_limit() {
            return pb_1.Message.getFieldWithDefault(this, 12, false) as boolean;
        }
        set bool_low_limit(value: boolean) {
            pb_1.Message.setOneofField(this, 12, this.#one_of_decls[10], value);
        }
        get has_bool_low_limit() {
            return pb_1.Message.getField(this, 12) != null;
        }
        get bool_high_limit() {
            return pb_1.Message.getFieldWithDefault(this, 13, false) as boolean;
        }
        set bool_high_limit(value: boolean) {
            pb_1.Message.setOneofField(this, 13, this.#one_of_decls[11], value);
        }
        get has_bool_high_limit() {
            return pb_1.Message.getField(this, 13) != null;
        }
        get _str_value() {
            const cases: {
                [index: number]: "none" | "str_value";
            } = {
                0: "none",
                2: "str_value"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _str_low_limit() {
            const cases: {
                [index: number]: "none" | "str_low_limit";
            } = {
                0: "none",
                3: "str_low_limit"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        get _str_high_limit() {
            const cases: {
                [index: number]: "none" | "str_high_limit";
            } = {
                0: "none",
                4: "str_high_limit"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        get _int_value() {
            const cases: {
                [index: number]: "none" | "int_value";
            } = {
                0: "none",
                5: "int_value"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5])];
        }
        get _int_low_limit() {
            const cases: {
                [index: number]: "none" | "int_low_limit";
            } = {
                0: "none",
                6: "int_low_limit"
            };
            return cases[pb_1.Message.computeOneofCase(this, [6])];
        }
        get _int_high_limit() {
            const cases: {
                [index: number]: "none" | "int_high_limit";
            } = {
                0: "none",
                7: "int_high_limit"
            };
            return cases[pb_1.Message.computeOneofCase(this, [7])];
        }
        get _float_value() {
            const cases: {
                [index: number]: "none" | "float_value";
            } = {
                0: "none",
                8: "float_value"
            };
            return cases[pb_1.Message.computeOneofCase(this, [8])];
        }
        get _float_low_limit() {
            const cases: {
                [index: number]: "none" | "float_low_limit";
            } = {
                0: "none",
                9: "float_low_limit"
            };
            return cases[pb_1.Message.computeOneofCase(this, [9])];
        }
        get _float_high_limit() {
            const cases: {
                [index: number]: "none" | "float_high_limit";
            } = {
                0: "none",
                10: "float_high_limit"
            };
            return cases[pb_1.Message.computeOneofCase(this, [10])];
        }
        get _bool_value() {
            const cases: {
                [index: number]: "none" | "bool_value";
            } = {
                0: "none",
                11: "bool_value"
            };
            return cases[pb_1.Message.computeOneofCase(this, [11])];
        }
        get _bool_low_limit() {
            const cases: {
                [index: number]: "none" | "bool_low_limit";
            } = {
                0: "none",
                12: "bool_low_limit"
            };
            return cases[pb_1.Message.computeOneofCase(this, [12])];
        }
        get _bool_high_limit() {
            const cases: {
                [index: number]: "none" | "bool_high_limit";
            } = {
                0: "none",
                13: "bool_high_limit"
            };
            return cases[pb_1.Message.computeOneofCase(this, [13])];
        }
        static fromObject(data: {
            event?: dependency_1.arike_pb.Event;
            str_value?: string;
            str_low_limit?: string;
            str_high_limit?: string;
            int_value?: number;
            int_low_limit?: number;
            int_high_limit?: number;
            float_value?: number;
            float_low_limit?: number;
            float_high_limit?: number;
            bool_value?: boolean;
            bool_low_limit?: boolean;
            bool_high_limit?: boolean;
        }): VariableEvent {
            const message = new VariableEvent({});
            if (data.event != null) {
                message.event = data.event;
            }
            if (data.str_value != null) {
                message.str_value = data.str_value;
            }
            if (data.str_low_limit != null) {
                message.str_low_limit = data.str_low_limit;
            }
            if (data.str_high_limit != null) {
                message.str_high_limit = data.str_high_limit;
            }
            if (data.int_value != null) {
                message.int_value = data.int_value;
            }
            if (data.int_low_limit != null) {
                message.int_low_limit = data.int_low_limit;
            }
            if (data.int_high_limit != null) {
                message.int_high_limit = data.int_high_limit;
            }
            if (data.float_value != null) {
                message.float_value = data.float_value;
            }
            if (data.float_low_limit != null) {
                message.float_low_limit = data.float_low_limit;
            }
            if (data.float_high_limit != null) {
                message.float_high_limit = data.float_high_limit;
            }
            if (data.bool_value != null) {
                message.bool_value = data.bool_value;
            }
            if (data.bool_low_limit != null) {
                message.bool_low_limit = data.bool_low_limit;
            }
            if (data.bool_high_limit != null) {
                message.bool_high_limit = data.bool_high_limit;
            }
            return message;
        }
        toObject() {
            const data: {
                event?: dependency_1.arike_pb.Event;
                str_value?: string;
                str_low_limit?: string;
                str_high_limit?: string;
                int_value?: number;
                int_low_limit?: number;
                int_high_limit?: number;
                float_value?: number;
                float_low_limit?: number;
                float_high_limit?: number;
                bool_value?: boolean;
                bool_low_limit?: boolean;
                bool_high_limit?: boolean;
            } = {};
            if (this.event != null) {
                data.event = this.event;
            }
            if (this.str_value != null) {
                data.str_value = this.str_value;
            }
            if (this.str_low_limit != null) {
                data.str_low_limit = this.str_low_limit;
            }
            if (this.str_high_limit != null) {
                data.str_high_limit = this.str_high_limit;
            }
            if (this.int_value != null) {
                data.int_value = this.int_value;
            }
            if (this.int_low_limit != null) {
                data.int_low_limit = this.int_low_limit;
            }
            if (this.int_high_limit != null) {
                data.int_high_limit = this.int_high_limit;
            }
            if (this.float_value != null) {
                data.float_value = this.float_value;
            }
            if (this.float_low_limit != null) {
                data.float_low_limit = this.float_low_limit;
            }
            if (this.float_high_limit != null) {
                data.float_high_limit = this.float_high_limit;
            }
            if (this.bool_value != null) {
                data.bool_value = this.bool_value;
            }
            if (this.bool_low_limit != null) {
                data.bool_low_limit = this.bool_low_limit;
            }
            if (this.bool_high_limit != null) {
                data.bool_high_limit = this.bool_high_limit;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.event != dependency_1.arike_pb.Event.ON_SET)
                writer.writeEnum(1, this.event);
            if (this.has_str_value)
                writer.writeString(2, this.str_value);
            if (this.has_str_low_limit)
                writer.writeString(3, this.str_low_limit);
            if (this.has_str_high_limit)
                writer.writeString(4, this.str_high_limit);
            if (this.has_int_value)
                writer.writeInt64(5, this.int_value);
            if (this.has_int_low_limit)
                writer.writeInt64(6, this.int_low_limit);
            if (this.has_int_high_limit)
                writer.writeInt64(7, this.int_high_limit);
            if (this.has_float_value)
                writer.writeDouble(8, this.float_value);
            if (this.has_float_low_limit)
                writer.writeDouble(9, this.float_low_limit);
            if (this.has_float_high_limit)
                writer.writeDouble(10, this.float_high_limit);
            if (this.has_bool_value)
                writer.writeBool(11, this.bool_value);
            if (this.has_bool_low_limit)
                writer.writeBool(12, this.bool_low_limit);
            if (this.has_bool_high_limit)
                writer.writeBool(13, this.bool_high_limit);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VariableEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VariableEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.event = reader.readEnum();
                        break;
                    case 2:
                        message.str_value = reader.readString();
                        break;
                    case 3:
                        message.str_low_limit = reader.readString();
                        break;
                    case 4:
                        message.str_high_limit = reader.readString();
                        break;
                    case 5:
                        message.int_value = reader.readInt64();
                        break;
                    case 6:
                        message.int_low_limit = reader.readInt64();
                        break;
                    case 7:
                        message.int_high_limit = reader.readInt64();
                        break;
                    case 8:
                        message.float_value = reader.readDouble();
                        break;
                    case 9:
                        message.float_low_limit = reader.readDouble();
                        break;
                    case 10:
                        message.float_high_limit = reader.readDouble();
                        break;
                    case 11:
                        message.bool_value = reader.readBool();
                        break;
                    case 12:
                        message.bool_low_limit = reader.readBool();
                        break;
                    case 13:
                        message.bool_high_limit = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VariableEvent {
            return VariableEvent.deserialize(bytes);
        }
    }
    export class TsVariableMeta extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            val_type?: dependency_1.arike_pb.ValType;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("val_type" in data && data.val_type != undefined) {
                    this.val_type = data.val_type;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get val_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_1.arike_pb.ValType.INT) as dependency_1.arike_pb.ValType;
        }
        set val_type(value: dependency_1.arike_pb.ValType) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            name?: string;
            val_type?: dependency_1.arike_pb.ValType;
        }): TsVariableMeta {
            const message = new TsVariableMeta({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.val_type != null) {
                message.val_type = data.val_type;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                val_type?: dependency_1.arike_pb.ValType;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.val_type != null) {
                data.val_type = this.val_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.val_type != dependency_1.arike_pb.ValType.INT)
                writer.writeEnum(2, this.val_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TsVariableMeta {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TsVariableMeta();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.val_type = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TsVariableMeta {
            return TsVariableMeta.deserialize(bytes);
        }
    }
    export class TsVarValue extends pb_1.Message {
        #one_of_decls: number[][] = [[2], [3], [4], [5], [6], [7]];
        constructor(data?: any[] | ({
            name?: string;
        } & (({
            val_type?: dependency_1.arike_pb.ValType;
        }) | ({
            int_value?: number;
        }) | ({
            float_value?: number;
        }) | ({
            str_value?: string;
        }) | ({
            bool_value?: boolean;
        }) | ({
            timestamp?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("val_type" in data && data.val_type != undefined) {
                    this.val_type = data.val_type;
                }
                if ("int_value" in data && data.int_value != undefined) {
                    this.int_value = data.int_value;
                }
                if ("float_value" in data && data.float_value != undefined) {
                    this.float_value = data.float_value;
                }
                if ("str_value" in data && data.str_value != undefined) {
                    this.str_value = data.str_value;
                }
                if ("bool_value" in data && data.bool_value != undefined) {
                    this.bool_value = data.bool_value;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get val_type() {
            return pb_1.Message.getFieldWithDefault(this, 2, dependency_1.arike_pb.ValType.INT) as dependency_1.arike_pb.ValType;
        }
        set val_type(value: dependency_1.arike_pb.ValType) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_val_type() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get int_value() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set int_value(value: number) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[1], value);
        }
        get has_int_value() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get float_value() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set float_value(value: number) {
            pb_1.Message.setOneofField(this, 4, this.#one_of_decls[2], value);
        }
        get has_float_value() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get str_value() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set str_value(value: string) {
            pb_1.Message.setOneofField(this, 5, this.#one_of_decls[3], value);
        }
        get has_str_value() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get bool_value() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set bool_value(value: boolean) {
            pb_1.Message.setOneofField(this, 6, this.#one_of_decls[4], value);
        }
        get has_bool_value() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setOneofField(this, 7, this.#one_of_decls[5], value);
        }
        get has_timestamp() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get _val_type() {
            const cases: {
                [index: number]: "none" | "val_type";
            } = {
                0: "none",
                2: "val_type"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        get _int_value() {
            const cases: {
                [index: number]: "none" | "int_value";
            } = {
                0: "none",
                3: "int_value"
            };
            return cases[pb_1.Message.computeOneofCase(this, [3])];
        }
        get _float_value() {
            const cases: {
                [index: number]: "none" | "float_value";
            } = {
                0: "none",
                4: "float_value"
            };
            return cases[pb_1.Message.computeOneofCase(this, [4])];
        }
        get _str_value() {
            const cases: {
                [index: number]: "none" | "str_value";
            } = {
                0: "none",
                5: "str_value"
            };
            return cases[pb_1.Message.computeOneofCase(this, [5])];
        }
        get _bool_value() {
            const cases: {
                [index: number]: "none" | "bool_value";
            } = {
                0: "none",
                6: "bool_value"
            };
            return cases[pb_1.Message.computeOneofCase(this, [6])];
        }
        get _timestamp() {
            const cases: {
                [index: number]: "none" | "timestamp";
            } = {
                0: "none",
                7: "timestamp"
            };
            return cases[pb_1.Message.computeOneofCase(this, [7])];
        }
        static fromObject(data: {
            name?: string;
            val_type?: dependency_1.arike_pb.ValType;
            int_value?: number;
            float_value?: number;
            str_value?: string;
            bool_value?: boolean;
            timestamp?: number;
        }): TsVarValue {
            const message = new TsVarValue({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.val_type != null) {
                message.val_type = data.val_type;
            }
            if (data.int_value != null) {
                message.int_value = data.int_value;
            }
            if (data.float_value != null) {
                message.float_value = data.float_value;
            }
            if (data.str_value != null) {
                message.str_value = data.str_value;
            }
            if (data.bool_value != null) {
                message.bool_value = data.bool_value;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                val_type?: dependency_1.arike_pb.ValType;
                int_value?: number;
                float_value?: number;
                str_value?: string;
                bool_value?: boolean;
                timestamp?: number;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.val_type != null) {
                data.val_type = this.val_type;
            }
            if (this.int_value != null) {
                data.int_value = this.int_value;
            }
            if (this.float_value != null) {
                data.float_value = this.float_value;
            }
            if (this.str_value != null) {
                data.str_value = this.str_value;
            }
            if (this.bool_value != null) {
                data.bool_value = this.bool_value;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.has_val_type)
                writer.writeEnum(2, this.val_type);
            if (this.has_int_value)
                writer.writeInt64(3, this.int_value);
            if (this.has_float_value)
                writer.writeDouble(4, this.float_value);
            if (this.has_str_value)
                writer.writeString(5, this.str_value);
            if (this.has_bool_value)
                writer.writeBool(6, this.bool_value);
            if (this.has_timestamp)
                writer.writeUint64(7, this.timestamp);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TsVarValue {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TsVarValue();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.val_type = reader.readEnum();
                        break;
                    case 3:
                        message.int_value = reader.readInt64();
                        break;
                    case 4:
                        message.float_value = reader.readDouble();
                        break;
                    case 5:
                        message.str_value = reader.readString();
                        break;
                    case 6:
                        message.bool_value = reader.readBool();
                        break;
                    case 7:
                        message.timestamp = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TsVarValue {
            return TsVarValue.deserialize(bytes);
        }
    }
    export class CreateVariablesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            collection?: string;
            variables?: TsVariableMeta[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("collection" in data && data.collection != undefined) {
                    this.collection = data.collection;
                }
                if ("variables" in data && data.variables != undefined) {
                    this.variables = data.variables;
                }
            }
        }
        get collection() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set collection(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get variables() {
            return pb_1.Message.getRepeatedWrapperField(this, TsVariableMeta, 2) as TsVariableMeta[];
        }
        set variables(value: TsVariableMeta[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            collection?: string;
            variables?: ReturnType<typeof TsVariableMeta.prototype.toObject>[];
        }): CreateVariablesRequest {
            const message = new CreateVariablesRequest({});
            if (data.collection != null) {
                message.collection = data.collection;
            }
            if (data.variables != null) {
                message.variables = data.variables.map(item => TsVariableMeta.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                collection?: string;
                variables?: ReturnType<typeof TsVariableMeta.prototype.toObject>[];
            } = {};
            if (this.collection != null) {
                data.collection = this.collection;
            }
            if (this.variables != null) {
                data.variables = this.variables.map((item: TsVariableMeta) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.collection.length)
                writer.writeString(1, this.collection);
            if (this.variables.length)
                writer.writeRepeatedMessage(2, this.variables, (item: TsVariableMeta) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateVariablesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateVariablesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.collection = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.variables, () => pb_1.Message.addToRepeatedWrapperField(message, 2, TsVariableMeta.deserialize(reader), TsVariableMeta));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateVariablesRequest {
            return CreateVariablesRequest.deserialize(bytes);
        }
    }
    export class CreateVariablesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: dependency_1.arike_pb.StatusCode;
            already_exists?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("already_exists" in data && data.already_exists != undefined) {
                    this.already_exists = data.already_exists;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_1.arike_pb.StatusCode.OK) as dependency_1.arike_pb.StatusCode;
        }
        set status(value: dependency_1.arike_pb.StatusCode) {
            pb_1.Message.setField(this, 1, value);
        }
        get already_exists() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set already_exists(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            status?: dependency_1.arike_pb.StatusCode;
            already_exists?: string[];
        }): CreateVariablesResponse {
            const message = new CreateVariablesResponse({});
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.already_exists != null) {
                message.already_exists = data.already_exists;
            }
            return message;
        }
        toObject() {
            const data: {
                status?: dependency_1.arike_pb.StatusCode;
                already_exists?: string[];
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.already_exists != null) {
                data.already_exists = this.already_exists;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != dependency_1.arike_pb.StatusCode.OK)
                writer.writeEnum(1, this.status);
            if (this.already_exists.length)
                writer.writeRepeatedString(2, this.already_exists);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateVariablesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateVariablesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readEnum();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateVariablesResponse {
            return CreateVariablesResponse.deserialize(bytes);
        }
    }
    export class DeleteVariablesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            collection?: string;
            names?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("collection" in data && data.collection != undefined) {
                    this.collection = data.collection;
                }
                if ("names" in data && data.names != undefined) {
                    this.names = data.names;
                }
            }
        }
        get collection() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set collection(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get names() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set names(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            collection?: string;
            names?: string[];
        }): DeleteVariablesRequest {
            const message = new DeleteVariablesRequest({});
            if (data.collection != null) {
                message.collection = data.collection;
            }
            if (data.names != null) {
                message.names = data.names;
            }
            return message;
        }
        toObject() {
            const data: {
                collection?: string;
                names?: string[];
            } = {};
            if (this.collection != null) {
                data.collection = this.collection;
            }
            if (this.names != null) {
                data.names = this.names;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.collection.length)
                writer.writeString(1, this.collection);
            if (this.names.length)
                writer.writeRepeatedString(2, this.names);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteVariablesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteVariablesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.collection = reader.readString();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteVariablesRequest {
            return DeleteVariablesRequest.deserialize(bytes);
        }
    }
    export class DeleteVariablesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: dependency_1.arike_pb.StatusCode;
            not_found?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("not_found" in data && data.not_found != undefined) {
                    this.not_found = data.not_found;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_1.arike_pb.StatusCode.OK) as dependency_1.arike_pb.StatusCode;
        }
        set status(value: dependency_1.arike_pb.StatusCode) {
            pb_1.Message.setField(this, 1, value);
        }
        get not_found() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set not_found(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            status?: dependency_1.arike_pb.StatusCode;
            not_found?: string[];
        }): DeleteVariablesResponse {
            const message = new DeleteVariablesResponse({});
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.not_found != null) {
                message.not_found = data.not_found;
            }
            return message;
        }
        toObject() {
            const data: {
                status?: dependency_1.arike_pb.StatusCode;
                not_found?: string[];
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.not_found != null) {
                data.not_found = this.not_found;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != dependency_1.arike_pb.StatusCode.OK)
                writer.writeEnum(1, this.status);
            if (this.not_found.length)
                writer.writeRepeatedString(2, this.not_found);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteVariablesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteVariablesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readEnum();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteVariablesResponse {
            return DeleteVariablesResponse.deserialize(bytes);
        }
    }
    export class ListVariablesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[2]];
        constructor(data?: any[] | ({
            collection?: string;
        } & (({
            pattern?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("collection" in data && data.collection != undefined) {
                    this.collection = data.collection;
                }
                if ("pattern" in data && data.pattern != undefined) {
                    this.pattern = data.pattern;
                }
            }
        }
        get collection() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set collection(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get pattern() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set pattern(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_pattern() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get _pattern() {
            const cases: {
                [index: number]: "none" | "pattern";
            } = {
                0: "none",
                2: "pattern"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            collection?: string;
            pattern?: string;
        }): ListVariablesRequest {
            const message = new ListVariablesRequest({});
            if (data.collection != null) {
                message.collection = data.collection;
            }
            if (data.pattern != null) {
                message.pattern = data.pattern;
            }
            return message;
        }
        toObject() {
            const data: {
                collection?: string;
                pattern?: string;
            } = {};
            if (this.collection != null) {
                data.collection = this.collection;
            }
            if (this.pattern != null) {
                data.pattern = this.pattern;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.collection.length)
                writer.writeString(1, this.collection);
            if (this.has_pattern)
                writer.writeString(2, this.pattern);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListVariablesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListVariablesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.collection = reader.readString();
                        break;
                    case 2:
                        message.pattern = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListVariablesRequest {
            return ListVariablesRequest.deserialize(bytes);
        }
    }
    export class ListVariablesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: dependency_1.arike_pb.StatusCode;
            variables?: TsVariableMeta[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("variables" in data && data.variables != undefined) {
                    this.variables = data.variables;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_1.arike_pb.StatusCode.OK) as dependency_1.arike_pb.StatusCode;
        }
        set status(value: dependency_1.arike_pb.StatusCode) {
            pb_1.Message.setField(this, 1, value);
        }
        get variables() {
            return pb_1.Message.getRepeatedWrapperField(this, TsVariableMeta, 2) as TsVariableMeta[];
        }
        set variables(value: TsVariableMeta[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            status?: dependency_1.arike_pb.StatusCode;
            variables?: ReturnType<typeof TsVariableMeta.prototype.toObject>[];
        }): ListVariablesResponse {
            const message = new ListVariablesResponse({});
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.variables != null) {
                message.variables = data.variables.map(item => TsVariableMeta.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                status?: dependency_1.arike_pb.StatusCode;
                variables?: ReturnType<typeof TsVariableMeta.prototype.toObject>[];
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.variables != null) {
                data.variables = this.variables.map((item: TsVariableMeta) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != dependency_1.arike_pb.StatusCode.OK)
                writer.writeEnum(1, this.status);
            if (this.variables.length)
                writer.writeRepeatedMessage(2, this.variables, (item: TsVariableMeta) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListVariablesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListVariablesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.variables, () => pb_1.Message.addToRepeatedWrapperField(message, 2, TsVariableMeta.deserialize(reader), TsVariableMeta));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListVariablesResponse {
            return ListVariablesResponse.deserialize(bytes);
        }
    }
    export class SetVariablesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[2]];
        constructor(data?: any[] | ({
            collection?: string;
            values?: TsVarValue[];
        } & (({
            timestamp?: number;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("collection" in data && data.collection != undefined) {
                    this.collection = data.collection;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
                if ("values" in data && data.values != undefined) {
                    this.values = data.values;
                }
            }
        }
        get collection() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set collection(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_timestamp() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get values() {
            return pb_1.Message.getRepeatedWrapperField(this, TsVarValue, 3) as TsVarValue[];
        }
        set values(value: TsVarValue[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get _timestamp() {
            const cases: {
                [index: number]: "none" | "timestamp";
            } = {
                0: "none",
                2: "timestamp"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2])];
        }
        static fromObject(data: {
            collection?: string;
            timestamp?: number;
            values?: ReturnType<typeof TsVarValue.prototype.toObject>[];
        }): SetVariablesRequest {
            const message = new SetVariablesRequest({});
            if (data.collection != null) {
                message.collection = data.collection;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            if (data.values != null) {
                message.values = data.values.map(item => TsVarValue.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                collection?: string;
                timestamp?: number;
                values?: ReturnType<typeof TsVarValue.prototype.toObject>[];
            } = {};
            if (this.collection != null) {
                data.collection = this.collection;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            if (this.values != null) {
                data.values = this.values.map((item: TsVarValue) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.collection.length)
                writer.writeString(1, this.collection);
            if (this.has_timestamp)
                writer.writeUint64(2, this.timestamp);
            if (this.values.length)
                writer.writeRepeatedMessage(3, this.values, (item: TsVarValue) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetVariablesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetVariablesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.collection = reader.readString();
                        break;
                    case 2:
                        message.timestamp = reader.readUint64();
                        break;
                    case 3:
                        reader.readMessage(message.values, () => pb_1.Message.addToRepeatedWrapperField(message, 3, TsVarValue.deserialize(reader), TsVarValue));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetVariablesRequest {
            return SetVariablesRequest.deserialize(bytes);
        }
    }
    export class SetVariablesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: dependency_1.arike_pb.StatusCode;
            not_found?: string[];
            invalid_type?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("not_found" in data && data.not_found != undefined) {
                    this.not_found = data.not_found;
                }
                if ("invalid_type" in data && data.invalid_type != undefined) {
                    this.invalid_type = data.invalid_type;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_1.arike_pb.StatusCode.OK) as dependency_1.arike_pb.StatusCode;
        }
        set status(value: dependency_1.arike_pb.StatusCode) {
            pb_1.Message.setField(this, 1, value);
        }
        get not_found() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set not_found(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get invalid_type() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set invalid_type(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            status?: dependency_1.arike_pb.StatusCode;
            not_found?: string[];
            invalid_type?: string[];
        }): SetVariablesResponse {
            const message = new SetVariablesResponse({});
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.not_found != null) {
                message.not_found = data.not_found;
            }
            if (data.invalid_type != null) {
                message.invalid_type = data.invalid_type;
            }
            return message;
        }
        toObject() {
            const data: {
                status?: dependency_1.arike_pb.StatusCode;
                not_found?: string[];
                invalid_type?: string[];
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.not_found != null) {
                data.not_found = this.not_found;
            }
            if (this.invalid_type != null) {
                data.invalid_type = this.invalid_type;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != dependency_1.arike_pb.StatusCode.OK)
                writer.writeEnum(1, this.status);
            if (this.not_found.length)
                writer.writeRepeatedString(2, this.not_found);
            if (this.invalid_type.length)
                writer.writeRepeatedString(3, this.invalid_type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SetVariablesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SetVariablesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readEnum();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SetVariablesResponse {
            return SetVariablesResponse.deserialize(bytes);
        }
    }
    export class GetVariablesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            collection?: string;
            names?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("collection" in data && data.collection != undefined) {
                    this.collection = data.collection;
                }
                if ("names" in data && data.names != undefined) {
                    this.names = data.names;
                }
            }
        }
        get collection() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set collection(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get names() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set names(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            collection?: string;
            names?: string[];
        }): GetVariablesRequest {
            const message = new GetVariablesRequest({});
            if (data.collection != null) {
                message.collection = data.collection;
            }
            if (data.names != null) {
                message.names = data.names;
            }
            return message;
        }
        toObject() {
            const data: {
                collection?: string;
                names?: string[];
            } = {};
            if (this.collection != null) {
                data.collection = this.collection;
            }
            if (this.names != null) {
                data.names = this.names;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.collection.length)
                writer.writeString(1, this.collection);
            if (this.names.length)
                writer.writeRepeatedString(2, this.names);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetVariablesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetVariablesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.collection = reader.readString();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetVariablesRequest {
            return GetVariablesRequest.deserialize(bytes);
        }
    }
    export class GetVariablesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: dependency_1.arike_pb.StatusCode;
            values?: TsVarValue[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("values" in data && data.values != undefined) {
                    this.values = data.values;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, dependency_1.arike_pb.StatusCode.OK) as dependency_1.arike_pb.StatusCode;
        }
        set status(value: dependency_1.arike_pb.StatusCode) {
            pb_1.Message.setField(this, 1, value);
        }
        get values() {
            return pb_1.Message.getRepeatedWrapperField(this, TsVarValue, 2) as TsVarValue[];
        }
        set values(value: TsVarValue[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            status?: dependency_1.arike_pb.StatusCode;
            values?: ReturnType<typeof TsVarValue.prototype.toObject>[];
        }): GetVariablesResponse {
            const message = new GetVariablesResponse({});
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.values != null) {
                message.values = data.values.map(item => TsVarValue.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                status?: dependency_1.arike_pb.StatusCode;
                values?: ReturnType<typeof TsVarValue.prototype.toObject>[];
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.values != null) {
                data.values = this.values.map((item: TsVarValue) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != dependency_1.arike_pb.StatusCode.OK)
                writer.writeEnum(1, this.status);
            if (this.values.length)
                writer.writeRepeatedMessage(2, this.values, (item: TsVarValue) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetVariablesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetVariablesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.values, () => pb_1.Message.addToRepeatedWrapperField(message, 2, TsVarValue.deserialize(reader), TsVarValue));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetVariablesResponse {
            return GetVariablesResponse.deserialize(bytes);
        }
    }
    export class SubscribeVariablesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            collection?: string;
            names?: string[];
            events?: VariableEvent[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("collection" in data && data.collection != undefined) {
                    this.collection = data.collection;
                }
                if ("names" in data && data.names != undefined) {
                    this.names = data.names;
                }
                if ("events" in data && data.events != undefined) {
                    this.events = data.events;
                }
            }
        }
        get collection() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set collection(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get names() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set names(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get events() {
            return pb_1.Message.getRepeatedWrapperField(this, VariableEvent, 3) as VariableEvent[];
        }
        set events(value: VariableEvent[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            collection?: string;
            names?: string[];
            events?: ReturnType<typeof VariableEvent.prototype.toObject>[];
        }): SubscribeVariablesRequest {
            const message = new SubscribeVariablesRequest({});
            if (data.collection != null) {
                message.collection = data.collection;
            }
            if (data.names != null) {
                message.names = data.names;
            }
            if (data.events != null) {
                message.events = data.events.map(item => VariableEvent.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                collection?: string;
                names?: string[];
                events?: ReturnType<typeof VariableEvent.prototype.toObject>[];
            } = {};
            if (this.collection != null) {
                data.collection = this.collection;
            }
            if (this.names != null) {
                data.names = this.names;
            }
            if (this.events != null) {
                data.events = this.events.map((item: VariableEvent) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.collection.length)
                writer.writeString(1, this.collection);
            if (this.names.length)
                writer.writeRepeatedString(2, this.names);
            if (this.events.length)
                writer.writeRepeatedMessage(3, this.events, (item: VariableEvent) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SubscribeVariablesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SubscribeVariablesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.collection = reader.readString();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    case 3:
                        reader.readMessage(message.events, () => pb_1.Message.addToRepeatedWrapperField(message, 3, VariableEvent.deserialize(reader), VariableEvent));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SubscribeVariablesRequest {
            return SubscribeVariablesRequest.deserialize(bytes);
        }
    }
}
